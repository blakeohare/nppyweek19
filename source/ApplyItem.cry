import Math;

function apply_item(walky_surface, area, area_id, item, sprite, region_id) {
	log = walky_surface.log;
	if (area_id == 'games1') {
		if (sprite != null) {
			if (sprite.type == 'mothercar1') {
				if (item == 'bluepin') {
					ai_give_pin_to_mother(walky_surface, sprite, area, log);
				}
			}
		}
	} else if (area_id == 'games2') {
		if (region_id != null && region_id != 'housepile') {
			found = false;
			for (token : Area.ALL_TOKEN_KEYS) {
				if (token == item) {
					found = true;
					break;
				}
			}
			if (found) {
				slot_key = region_id.upper() + "_TAKEN";
				if (log.get_int(slot_key, 0) == 0) {
					log.set_int(slot_key, 1);
					log.set_int('HAS_' + item.upper(), 2);
					i = parseInt(slot_key[4]) - 1;
					log.set_int(item.upper() + '_INDEX', i);
					coord = Area.MONOPOLY_INDEX[i];
					sprite = new Sprite(item, coord[0], coord[1]);
					area.sprites.add(sprite);
				}
			}
		}
		
		if (log.get_int('HAS_PHOTO4', 0) == 0) {
			total = 0;
			for (i = 1; i <= 9; ++i) {
				if (log.get_int("SLOT" + i + "_TAKEN", 0) == 1) {
					total++;
				}
			}
			if (total == 8) {
				log.set_int("SHOW_PHOTO4", 1);
				log.set_int("SHOW_GETOUTOFJAIL", 1);
				s1 = new Sprite('photo4', 160, 0);
				s2 = new Sprite('getoutofjail', 160, 0);
				s1.ghost = true;
				s2.ghost = true;
				w1 = [[160, 0]];
				w2 = [[160, 0]];
				for (i = 0; i < 40; ++i) {
					x = Math.sin(i * 3.14159 * 2 / 20) * 80 * i / 40;
					w1.add([-x + 160, i * 2]);
					w2.add([x + 160, i * 2]);
				}
				s1.waypoints = w1;
				s2.waypoints = w2;
				area.sprites.add(s1);
				area.sprites.add(s2);
			}
		}
	} else if (area_id == 'legos2') {
		if (item == 'getoutofjail') {
			pos = get_mouse_position();
			x = pos[0];
			y = pos[1];
			if (x > 251 && y < 85 && y > 50) {
				ai_free_king(walky_surface);
			}
		}
	} else if (area_id == 'misc2') {
		if (sprite != null && sprite.type == 'guard') {
			if (item == 'bow') {
				if (log.get_int('GATE_OPEN', 0) == 0) {
					ai_shooting_game(walky_surface, area, log);
				}
			}
		}
	} else if (area_id == 'misc3') {
		if (sprite != null && sprite.type == 'teeth') {
			if (item == 'wrappedgum') {
				ai_teeth_chew_gum(walky_surface, area, sprite, log);
			}
		}
		if (item == 'chewedgum') {
			walky_surface.invoke_dialog(["Alex throws the gum at the T-Rex"], ai_throw_gum, null);
		}
	} else if (area_id == 'misc4') {
		if (region_id == 'band' && item == 'rubberband') {
			ai_rubberband_stretch(walky_surface, area, log);
		}
		if (region_id == 'vents' && item == 'wrapper') {
			ai_vent_parachute(walky_surface, area, log);
		}
		if (sprite != null && sprite.type == 'steam' && item == 'wrapper') {
			ai_vent_parachute(walky_surface, area, log);
		}
	} else if (area_id == 'sports1') {
		if (sprite != null) {
			if (sprite.type == 'bballplayer1' || sprite.type == 'bballplayer2' || sprite.type == 'bballplayer3') {
				if (item == 'ball') {
					has_both = log.get_int('HAS_BAT', 0) == 2;
					ai_give_ball_to_player(walky_surface, sprite, area, log, item, has_both);
				} else if (item == 'bat') {
					has_both = log.get_int('HAS_BALL', 0) == 2;
					ai_give_ball_to_player(walky_surface, sprite, area, log, item, has_both);
				} else if (log.get_int('HAS_WRAPPEDGUM', 0) != 0) {
					if (item == 'house' || item == 'volcanopog' || item == 'legopog' || item == 'trainpog') {
						ai_give_base_to_player(walky_surface, sprite, area, log, item);
					}
				}
			}
		}
	} else if (area_id == 'trains1') {
		if (sprite != null) {
			if (sprite.type == 'conductor' || sprite.type == 'enginenowheel') {
				if (item == 'trainwheel') {
					ai_give_wheel_to_conductor(walky_surface, area, log);
				}
			}
		}
	} else if (area_id == 'trains3') {
		if (item == 'wizard') {
			ai_release_wizard(walky_surface, area, log);
		}
	}
}

function ai_free_king(scene) {
	if (scene.log.get_int("LEGO_STATE", 0) == 2) return;

	scene.log.set_int('LEGO_STATE', 2);
	scene.log.set_int('HAS_GETOUTOFJAIL', 2);
	area = scene.area;
	sadman = area.get_sprite_by_type('sadman');
	sadman.dead = true;
	trueking = new Sprite('trueking', 300, 98);
	area.sprites.add(trueking);
	scene.invoke_dialog(["As if by magic, the police", "car door opens."], ai_free_king2, null);
}

function ai_free_king2(scene, args) {
	scene.invoke_dialog([
		"Gasp! It's the true king of",
		"Legoville!"], ai_free_king3, null);
}

function ai_free_king3(scene, args) {
	scene.invoke_dialog([
		"True King: And I challenge you,",
		"false king, to an epic cinematic",
		"duel to death!"], ai_free_king4, null);
}

function ai_free_king4(scene, args) {
	scene.invoke_dialog([
		"False King: I accept!"], ai_free_king5, null);
}

function ai_free_king5(scene, args) {
	sprite = new Sprite('cinematichack', 160, 208);
	falseking = scene.area.get_sprite_by_type('king');
	trueking = scene.area.get_sprite_by_type('trueking');
	trueking.x = falseking.x;
	trueking.y = falseking.y;
	falseking.dead = true;
	scene.area.sprites.add(sprite);
	scene.timeouts.add([120, ai_free_king6a, []]);
}

function ai_free_king6a(scene, args) {
	scene.area.get_sprite_by_type('cinematichack').dead = true;
	scene.timeouts.add([10, ai_free_king6b, []]);
}

function ai_free_king6b(scene, args) {
	scene.timeouts.add([1, ai_free_king7, []]);
}

function ai_free_king7(scene, args) {
	scene.invoke_dialog([
		"Long live the new king!"], ai_free_king8, null);
}

function ai_free_king8(scene, args) {
	scene.invoke_dialog([
		"True King: Our kingdom is in",
		"your debt, Sir Alex. Please",
		"take this photo scrap as a",
		"token of our appreciation."], null, null);
	scene.log.set_int('HAS_PHOTO5', 1);
}

function ai_vent_parachute(scene, area, log) {
	dx = area.player.x - 155;
	dy = area.player.y - 47;
	dist = (dx ** 2 + dy ** 2) ** .5;
	if (dist > 40) {
		scene.invoke_dialog([
			"You're too far away."], null, null);
	} else {
		scene.invoke_dialog([
			"Using the gum wrapper as a glider,",
			"Alex parachutes down to the lower",
			"ledge using the steam vents as a",
			"boost."], null, null);
		proxy = new Sprite('ventalex', scene.area.player.x, scene.area.player.y);
		scene.area.player.x = 999999;
		proxy.ghost = true;
		proxy.waypoints = [[85, 163]];
		area.sprites.add(proxy);
		scene.timeouts.add([30 * 4, ai_vent_parachute2, [proxy]]);
	}
}

function ai_vent_parachute2(scene, args) {
	proxy = args[0];
	proxy.dead = true;
	scene.area.player.x = 85;
	scene.area.player.y = 163;
}

function ai_rubberband_stretch(scene, area, log) {
	scene.invoke_dialog([
		"Alex stretches the rubber band",
		"between two stalagmites."], null, null);
	log.set_int('HAS_RUBBERBAND', 2);
	sprite = new Sprite('rubberband2', 70, 201);
	area.sprites.add(sprite);
}

function ai_throw_gum2(scene, args) {
	scene.invoke_dialog([
		"It looks like he's stuck"], null, null);
}

function ai_throw_gum(scene, args) {
	area = scene.area;
	log = scene.log;
	sprite = new Sprite('chewedgum', area.player.x, area.player.y);
	sprite.v = 12.0;
	sprite.waypoints.add([142, 84]);
	dino = area.get_sprite_by_type('dino');
	dino.waypoints.add([142, 87]);
	scene.timeouts.add([30 * 2, ai_throw_gum2, null]);
	log.set_int('HAS_CHEWEDGUM', 2);
	log.set_int('DINO_STATE', 1);
	area.sprites.add(sprite);
}

function ai_teeth_chew_gum2(scene, args) {
	sprite = args[0];
	sprite.teething = false;
	scene.invoke_dialog([
		"Alex's wrapped gum is now",
		"chewed gum and a wrapper."], null, null);
}

function ai_teeth_chew_gum(walky_surface, area, sprite, log) {
	sprite.teething = true;
	log.set_int('HAS_WRAPPEDGUM', 2);
	log.set_int('HAS_WRAPPER', 1);
	log.set_int('HAS_CHEWEDGUM', 1);
	walky_surface.timeouts.add([30 * 3, ai_teeth_chew_gum2, [sprite]]);
}

function ai_shooting_game2(scene, args) {
	scene.next = new ShootingGame(scene);
}

function ai_shooting_game(walky_surface, area, log) {
	walky_surface.invoke_dialog([
		"I see you have a bow and arrow.",
		"A bit unconventional, but I'll",
		"let it pass. As long as you can",
		"use it. Show me on that target",
		"over there."], ai_shooting_game2, []);
}

function ai_release_wizard(walky_surface, area, log) {
	log.set_int('HAS_WIZARD', 2);
	area.sprites.add(new Sprite('wizard', 187, 132));
	walky_surface.invoke_dialog([
		"Now, THIS is my sort of scene.",
		"I bet they won't even be mad if",
		"I use my scepter effects."], null, null);
}

function ai_train_launch2(scene, args) {
	scene.area.train_go = true;
}

function ai_train_launch1(scene, args) {
	scene.invoke_dialog([
		"Please put up all tray tables",
		"and keep all hands and feet in",
		"the bus at all times.",
		"And remember, the closest exit",
		"may be behind you.",
		"3...2...1...launch!"
		], null, null);
	scene.timeouts.add([20, ai_train_launch2, []]);
	scene.player.x = 9999;
	for (sprite : scene.area.sprites) {
		if (sprite.type == 'enginewithwheel' || sprite.type == 'traincar') {
			// pass
		} else {
			sprite.x = 9999;
		}
	}
}

function ai_give_wheel_to_conductor(walky_surface, area, log) {
	walky_surface.invoke_dialog([
			"Goodness, the missing wheel!",
			"Now we can set sail!"
			], null, null);
	log.set_int('TRAIN_RUNNING', 1);
	log.set_int('HAS_TRAINWHEEL', 2);
	walky_surface.timeouts.add([20, ai_train_launch1, []]);
	for (sprite : area.sprites) {
		if (sprite.type == 'enginenowheel') {
			sprite.dead = true;
			area.sprites.add(new Sprite('enginewithwheel', sprite.x, sprite.y));
			return;
		}
	}
}

function ai_give_ball_to_player(walky_surface, sprite, area, log, item, has_both) {
	log.set_int('HAS_' + item.upper(), 2);
	if (has_both) {
		walky_surface.invoke_dialog([
				"Oh, look, a " + item + "!",
				"Now we can actually play some ball!",
				"Have some gum for your troubles."
				], null, null);
		log.set_int('HAS_WRAPPEDGUM', 1);
	} else {
		if (item == 'ball') {
			walky_surface.invoke_dialog([
				"Oh, look, a ball!",
				"Now we just need a bat."], null, null);
		} else {
			walky_surface.invoke_dialog([
				"Oh, look, a bat!",
				"Now we just need a ball."], null, null);
		}
	}
}

function ai_give_base_to_player(walky_surface, sprite, area, log, item) {
	log.set_int('HAS_' + item.upper(), 2);
	
	sum = log.get_int('HAS_HOUSE', 0) + log.get_int('HAS_TRAINPOG', 0) + log.get_int('HAS_LEGOPOG', 0) + log.get_int('HAS_VOLCANOPOG', 0);
	if (item == 'legopog') {
		sprite = new Sprite('legopog', 147, 159);
	} else if (item == 'volcanopog') {
		sprite = new Sprite(item, 253, 160);
	} else if (item == 'trainpog') {
		sprite = new Sprite(item, 239, 100);
	} else {
		sprite = new Sprite(item, 147, 96);
	}
	area.sprites.add(sprite);
	
	if (sum == 8) {
		walky_surface.invoke_dialog([
			"Hey, we have all the bases now!",
			"Take this as a token of our ",
			"appreciation",
			"",
			"(He gives you a photo piece)"
			], null, null);
		log.set_int('HAS_PHOTO2', 1);
	} else {
		walky_surface.invoke_dialog([
			"Thanks! This will make seeing the",
			"bases easier."
		], null, null);
	}
}

function ai_give_ball_and_bat_to_player(walky_surface, sprite, area, log) {
	log.set_int('HAS_BALL', 2);
	log.set_int('HAS_BAT', 2);
	walky_surface.invoke_dialog([
		"Hooray!",
		"Now we can play.",
		"Have some buble gum for your troubles.",
		"Now if we only had some bases."], null, null);
}

function ai_give_pin_to_mother(walky_surface, sprite, area, log) {
	sprite.dead = true;
	ns = new Sprite('mothercar2', sprite.x, sprite.y);
	ns.lifetime = sprite.lifetime;
	area.sprites.add(ns);
	walky_surface.invoke_dialog([
		"My baby!",
		"Where ever did you find him!",
		"Here, have a car token."], null, null);
	log.set_int('HAS_BLUEPIN', 2);
	log.set_int('SHOW_CAR_TOKEN', 1);
	area.sprites.add(new Sprite('racecar', ns.x, ns.y + 12));
}
	