
const ITEMS_PER_ROW = 5;

class InventoryOverlay {

	static field ALL_ITEMS = [
		'bat',
		'ball',
		'battleship',
		'bluepin',
		'boot',
		'bow',
		'chewedgum',
		'getoutofjail',
		'glue',
		'horse',
		'house',
		'legopog',
		'racecar',
		'rubberband',
		'scottie',
		'thimble',
		'tophat',
		'trainpog',
		'trainwheel',
		'volcanopog',
		'wheelbarrow',
		'wizard',
		'wrappedgum',
		'wrapper',
		'photo1',
		'photo2',
		'photo3',
		'photo4',
		'photo5'
	];

	constructor(playscene) {
		this.playscene = playscene;
		this.next = this;
		this.item_grid = this.build_item_grid(this.playscene.log);
		this.rectangles = null;
	}
	
	function build_item_grid(log) {
		output = [];
		index = 0;
		for (item : InventoryOverlay.ALL_ITEMS) {
			if (log.get_int("HAS_" + item.upper(), 0) == 1) {
				x = index % ITEMS_PER_ROW;
				if (x == 0) {
					row = [];
					for (i = 0; i < ITEMS_PER_ROW; ++i) {
						row.add(null);
					}
					output.add(row);
				}
				y = Math.floor(index / ITEMS_PER_ROW);
				output[y][x] = item;
				index++;
			}
		}
		this.has_any = index > 0;
		return output;
	}
		
	function update(events) {
		exit = false;
		for (ev : events) {
			if (ev.type == EventType.MOUSE_LEFT_DOWN) {
				x = ev.x;
				y = ev.y;
				if (this.rectangles != null) {
					for (rect : this.rectangles) {
						if (x > rect[0] && x < rect[2] && y > rect[1] && y < rect[3]) {
							item = rect[4];
							this.playscene.cursor = CURSOR_ITEM;
							this.playscene.active_item = item;
						}
					}
				}
							
				this.next = this.playscene;
				this.playscene.next = this.playscene;
			}
		}
	}
	
	function render(screen, images, rc, is_primary) {
		this.playscene.render(screen, images, rc, false);
		rectangles = [];
		rowcount = this.item_grid.length;
		
		width = ITEMS_PER_ROW * 32;
		left = Math.floor((320 - width) / 2);
		height = rowcount * 32;
		top = (240 - height) / 2;
		Draw.rectangle(left - 2, top - 2, width + 4, height + 4, 200, 200, 230);
		Draw.rectangle(left - 1, top - 1, width + 2, height + 2, 0, 0, 120);
		Draw.rectangle(left, top, width, height, 200, 200, 230);
		for (y = 0; y < rowcount; ++y) {
			for (x = 0; x < this.item_grid[y].length; ++x) {
				item = self.item_grid[y][x];
				if (item != null) {
					rleft = x * 32 + left;
					rtop = y * 32 + top;
					images['icons/' + item].draw(rleft + 1, rtop + 1);
					if (this.rectangles == null) {
						rectangles.add([rleft, rtop, rleft + 32, rtop + 32, item]);
					}
				}
			}
		}
		if (this.rectangles == null) {
			this.rectangles = rectangles;
		}
		if (!this.has_any) {
			Draw.rectangle(60, 80, 200, 50, 200, 200, 230);
			draw_text(screen, images, 80, 100, "You are not carrying anything.");
		}
		if (is_primary) {
			render_cursor('pointy', null, screen, images);
		}
	}
}
