import 'gamelib.cry';

class Event {
	constructor(type, key, x, y) {
		this.type = type;
		this.key = key;
		this.x = x;
		this.y = y;
	}
}

_current_mouse_position = [0, 0];

function get_mouse_position() {
	return _current_mouse_position;
}

class SceneProxy : SceneBase {
	constructor() : base() {
		this.active_scene = new %%%START_SCENE%%%();
		this.rc = 0;
		this.image_library = null;
	}

	function set_image_library(lib) {
		this.image_library = lib;
	}

	function update(events) {
		if (this.active_scene == null) {
			this.switch_scene(null);
		} else {
			modified_events = [];
			for (i = 0; i < events.length; ++i) {
				ev = events[i];
				if (ev.type == 'mousemove') {
					x = ev.x;
					y = ev.y;
					_current_mouse_position[0] = x;
					_current_mouse_position[1] = y;
					modified_events.add(new Event('mousemove', null, x, y));
				} else if (ev.is_key) {
					key = ev.key;
					if (ev.down) {
						modified_events.add(new Event('keydown', key, 0, 0));
					} else {
						modified_events.add(new Event('keyup', key, 0, 0));
					}
				} else if (ev.type == 'mouseleftdown' || 
					ev.type == 'mouseleftup' || 
					ev.type == 'mouserightdown' ||
					ev.type == 'mouserightup') {
					modified_events.add(new Event(ev.type, null, ev.x, ev.y));
				} else if (ev.is_quit) {
					modified_events.add(new Event('quit', 'js', 0, 0));
				}
			}
			this.active_scene.update(modified_events);
		}
	}

	function load_images(image_library) {
		this.image_library = image_library.get_raw_image_lookup();
	}

	function render() {
		if (this.active_scene != null) {
			this.active_scene.render(null, this.image_library, this.rc, true);
			this.rc += 1;
			this.active_scene = this.active_scene.next;
		}
	}
}
